class Car:
    def __init__(self, brand, model, year):
        self.brand = brand
        self.model = model
        self.year = year
        self.mileage = 0
        self.fuel_level = 100

    def drive(self, kilometers):
        fuel_needed = kilometers * 0.1
        if fuel_needed <= self.fuel_level:
            self.mileage += kilometers
            self.fuel_level -= fuel_needed
            print(f"{kilometers} km driven. New mileage: {self.mileage}, Fuel level: {self.fuel_level}%")
        else:
            print("Not enough fuel to drive the requested distance.")

    def refuel(self, amount):
        if self.fuel_level + amount > 100:
            self.fuel_level = 100
        else:
            self.fuel_level += amount
        print(f"Refueled. New fuel level: {self.fuel_level}%")


class Fleet:
    def __init__(self):
        self.cars = []

    def add_car(self, car):
        self.cars.append(car)
        print(f"Car added: {car.brand} {car.model} ({car.year})")

    def remove_car(self, car):
        self.cars.remove(car)
        print(f"Car removed: {car.brand} {car.model} ({car.year})")

    def total_mileage(self):
        total = sum(car.mileage for car in self.cars)
        print(f"Total mileage of the fleet: {total} km")
        return total


# Példa használat
if __name__ == "__main__":
    car1 = Car("Toyota", "Corolla", 2020)
    car2 = Car("Ford", "Focus", 2018)
    car3 = Car("Honda", "Civic", 2019)

    fleet = Fleet()
    fleet.add_car(car1)
    fleet.add_car(car2)
    fleet.add_car(car3)

    car1.drive(50)
    car2.drive(30)
    car3.drive(70)

    car1.refuel(20)
    car2.refuel(50)
    car3.refuel(10)

    fleet.total_mileage()
